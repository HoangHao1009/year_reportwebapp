import streamlit as st
import pandas as pd
import numpy as np
from streamlit_option_menu import option_menu
import plotly.express as px
import gdown

st.set_page_config(
    page_title = 'B√°o C√°o NƒÉm DELI Mi·ªÅn Nam 2023',
    page_icon = 'üìú',
    layout = 'wide'
)

options = option_menu(
    menu_title = 'Ch·ªçn ch·∫ø ƒë·ªô',
    options = ['Chi ti·∫øt', 'T·ªïng quan'],
    orientation = 'horizontal'
)


@st.cache_data(persist = True)
def get_data(url):
    file_id = url.split("/")[-2]
    url = f"https://drive.google.com/uc?id={file_id}"
    data = pd.read_csv(url)
    success_empty = st.empty()
    success_empty.success("ƒê·ªçc file CSV th√†nh c√¥ng. D·ªØ li·ªáu DataFrame:")
    success_empty.empty()
    #data = pd.read_csv('donhang.csv')
    data = data[data['K√™nh l·ªõn'] == 'TRUYENTHONG']
    data = data[data['Nh√≥m l·ªõn'] != '0']
    data = data[~data['Nh√≥m l·ªõn'].isna()]
    data = data[data['NƒÉm'] != 2021]
    data = data.drop(['K√™nh l·ªõn', 'K√™nh nh·ªè', 'M√£ h√†ng c≈©'], axis = 1)
    return data
url_empty = st.empty()
url = url_empty.text_input('Nh·∫≠p url ƒë·ªÉ xem b√°o c√°o')
data = get_data(url)
url_empty.empty()

options_nhomlon = list(data['Nh√≥m l·ªõn'].unique())

options_nhomlon = sorted([str(x) for x in options_nhomlon])
nhomlon = st.sidebar.multiselect(
    'Ch·ªçn nh√≥m l·ªõn',
    options = ['Ch·ªçn t·∫•t c·∫£'] + options_nhomlon,
    default = 'Ch·ªçn t·∫•t c·∫£'
)

option_phanloai = sorted(data[data['Nh√≥m l·ªõn'].isin(nhomlon)]['Ph√¢n lo·∫°i'].unique().tolist())
phanloai = st.sidebar.multiselect(
    'Ch·ªçn ph√¢n lo·∫°i',
    options = ['Ch·ªçn t·∫•t c·∫£'] + option_phanloai,
    default = 'Ch·ªçn t·∫•t c·∫£'
)

def set_all(nhom, col_name):
    if 'Ch·ªçn t·∫•t c·∫£' in nhom or nhomlon == []:
        results = data[col_name].unique()
    else:
        results = nhom
    return results

nhomlon = set_all(nhomlon, 'Nh√≥m l·ªõn')
phanloai = set_all(phanloai, 'Ph√¢n lo·∫°i')


data = data[data['Nh√≥m l·ªõn'].isin(nhomlon)
            & data['Ph√¢n lo·∫°i'].isin(phanloai)]
@st.cache_data
def take_bc(group_col, data, type = 'normal'):
    def tangtruong(x, y, perc = False):
        df1 = x.copy()
        df2 = y.copy()
        def take_col(df):
            results = []
            for col in df.columns:
                if len(col) > 1:
                    x = col[-1]
                else:
                    x = col
                results.append(x)
            return results
        df1.columns = take_col(df1)
        df2.columns = take_col(df2)
        common_columns = df1.columns.intersection(df2.columns)

        if perc == False:
            output = df1[common_columns] - df2[common_columns]
        else:
            output = df1[common_columns] / df2[common_columns] - 1
            output = output.map(lambda x: f'{x:.2%}')
        return output
    group_col = group_col
    dt = data.groupby(group_col)['Doanh thu thu·∫ßn'].sum()
    dt = dt.unstack(['V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'])

    dt_mb = dt.loc[:,['Mi·ªÅn B·∫Øc']]
    dt_mn = dt.loc[:,['Mi·ªÅn Nam']]
    dt_2022 = dt.loc[:, (slice(None), 2022, slice(None))]
    dt_2023 = dt.loc[:, (slice(None), 2023, slice(None))]
    dt_mn_2022 = dt.loc[:,('Mi·ªÅn Nam', 2022, slice(None))]
    dt_mn_2023 = dt.loc[:,('Mi·ªÅn Nam', 2023, slice(None))]

    tangtruong_df = tangtruong(dt_mn_2023, dt_mn_2022, perc = True)
    tangtruong_df.fillna(0, inplace = True)
    tangtruong_df.columns = [f'{col}_tangtruong%' for col in tangtruong_df.columns]

    tangtruong_ds = tangtruong(dt_mn_2023, dt_mn_2022, perc = False)
    tangtruong_ds.fillna(0, inplace = True)
    tangtruong_ds.columns = [f'{col}_tangtruong' for col in tangtruong_ds.columns]

    sum_by_vm_2023 = dt_2023.groupby(level = 0, axis = 1).sum()
    sum_by_vm_2023.columns = [f'T·ªïng DS 2023 {col}' for col in sum_by_vm_2023]
    sum_by_vm_2023['T·ªïng DS 2023 C·∫£ n∆∞·ªõc'] = sum_by_vm_2023.sum(axis = 1)
    sum_by_vm_2022 = dt_2022.groupby(level = 0, axis = 1).sum()
    sum_by_vm_2022.columns = [f'T·ªïng DS 2022 {col}' for col in sum_by_vm_2022]
    sum_by_vm_2022['T·ªïng DS 2022 C·∫£ n∆∞·ªõc'] = sum_by_vm_2022.sum(axis = 1)
    sum_by_vm = pd.merge(sum_by_vm_2023, sum_by_vm_2022, left_index = True, right_index = True)
    sum_by_vm['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'] = sum_by_vm['T·ªïng DS 2023 Mi·ªÅn Nam'] / sum_by_vm['T·ªïng DS 2022 Mi·ªÅn Nam'] -1
    sum_by_vm['TƒÉng tr∆∞·ªüng MN 2023 (Doanh s·ªë)'] = sum_by_vm['T·ªïng DS 2023 Mi·ªÅn Nam'] - sum_by_vm['T·ªïng DS 2022 Mi·ªÅn Nam'] 
    sum_by_vm['T·ª∑ tr·ªçng MN so v·ªõi C·∫£ n∆∞·ªõc 2023'] = sum_by_vm['T·ªïng DS 2023 Mi·ªÅn Nam'] / sum_by_vm_2023['T·ªïng DS 2023 C·∫£ n∆∞·ªõc']
    for i in ['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)', 'T·ª∑ tr·ªçng MN so v·ªõi C·∫£ n∆∞·ªõc 2023']:
        sum_by_vm[i] = sum_by_vm[i].map(lambda x: f'{x:.2%}')

    #DS 2022
    ds2022 = dt_mn_2022.copy()
    ds2022.columns = [f'Doanh s·ªë {x[-1]} {x[-2]}' for x in ds2022.columns]
    #DS 2023
    ds2023 = dt_mn_2023.copy()
    ds2023.columns = [f'Doanh s·ªë {x[-1]} {x[-2]}' for x in ds2023.columns]

    bc = pd.merge(sum_by_vm, tangtruong_df, how ='left', left_index = True, right_index = True)\
        .merge(tangtruong_ds, how = 'left', left_index = True, right_index = True)\
        .merge(ds2022, how = 'left', left_index = True, right_index = True)\
        .merge(ds2023, how = 'left', left_index = True, right_index = True)
    
    if type == 'normal':
        bc = bc
    elif type == 'nhomlon':
        bc['T·ª∑ tr·ªçng nh√≥m'] = bc['T·ªïng DS 2023 Mi·ªÅn Nam'] / sum(bc['T·ªïng DS 2023 Mi·ªÅn Nam'])
        bc['T·ª∑ tr·ªçng nh√≥m'] = bc['T·ª∑ tr·ªçng nh√≥m'].map(lambda x: f'{np.round(x, 2):.2%}')
    elif type == 'phanloai':
        def tytrongnhom(df):
            df = df.reset_index()
            results = []
            for k, v in zip(df['Nh√≥m l·ªõn'], df['Ph√¢n lo·∫°i']):
                dt = df[df['Nh√≥m l·ªõn'] == k]
                tongnhom = sum(dt['T·ªïng DS 2023 Mi·ªÅn Nam'])
                dsphanloai = dt[dt['Ph√¢n lo·∫°i'] == v]['T·ªïng DS 2023 Mi·ªÅn Nam'].values[0]
                tytrong = dsphanloai/tongnhom
                results.append(tytrong)
            return results
        bc['T·ª∑ tr·ªçng nh√≥m'] = tytrongnhom(bc)
        bc['T·ª∑ tr·ªçng nh√≥m'] = bc['T·ª∑ tr·ªçng nh√≥m'].map(lambda x: f'{np.round(x, 2):.2%}')
    return bc

if options == 'Chi ti·∫øt':

    bc_nl = take_bc(['Nh√≥m l·ªõn', 'V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data, type = 'nhomlon')

    bc_pl = take_bc(['Nh√≥m l·ªõn', 'Ph√¢n lo·∫°i','V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data, type = 'phanloai')

    bc_sp = take_bc(['Nh√≥m l·ªõn', 'Ph√¢n lo·∫°i', 'M√£ h√†ng','V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data)

    
    default_col = ['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)', 'T·ªïng DS 2023 Mi·ªÅn Nam',
                'T·ª∑ tr·ªçng MN so v·ªõi C·∫£ n∆∞·ªõc 2023',
                'TƒÉng tr∆∞·ªüng MN 2023 (Doanh s·ªë)',
                'T·ªïng DS 2023 Mi·ªÅn B·∫Øc', 'T·ªïng DS 2023 C·∫£ n∆∞·ªõc',
                'T·ªïng DS 2022 Mi·ªÅn Nam', 'T·ªïng DS 2022 Mi·ªÅn B·∫Øc', 'T·ªïng DS 2022 C·∫£ n∆∞·ªõc',]
    mn_col = ['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)', 'T·ª∑ tr·ªçng MN so v·ªõi C·∫£ n∆∞·ªõc 2023',
            'T·ªïng DS 2023 Mi·ªÅn Nam', 'T·ªïng DS 2022 Mi·ªÅn Nam',
            'TƒÉng tr∆∞·ªüng MN 2023 (Doanh s·ªë)',
            ]

    with st.expander('Click ƒë·ªÉ ch·ªçn c·ªôt'):
        tatcamien = st.checkbox('Ch·ªçn c·ªôt c·ªßa c·∫£ 2 mi·ªÅn (M·∫∑c ƒë·ªãnh mi·ªÅn Nam)')
        tatcacot = st.checkbox('Xem t·∫•t c·∫£ c·ªôt (ds chi ti·∫øt)')

    if tatcacot:
        if tatcamien:
            bc_nl = bc_nl
            bc_pl = bc_pl
            bc_sp = bc_sp
        else:
            another_col = [c for c in bc_sp if c not in default_col]
            col = another_col + mn_col
            bc_nl = bc_nl[col + ['T·ª∑ tr·ªçng nh√≥m']]
            bc_pl = bc_pl[col + ['T·ª∑ tr·ªçng nh√≥m']]
            bc_pl = bc_pl[col]
    else:
        if tatcamien:
            bc_nl = bc_nl[default_col + ['T·ª∑ tr·ªçng nh√≥m']]
            bc_pl = bc_pl[default_col + ['T·ª∑ tr·ªçng nh√≥m']]
            bc_sp = bc_sp[default_col]
        else:
            bc_nl = bc_nl[mn_col + ['T·ª∑ tr·ªçng nh√≥m']]
            bc_pl = bc_pl[mn_col + ['T·ª∑ tr·ªçng nh√≥m']] 
            bc_sp = bc_sp[mn_col]

    theonl, theopl = st.columns(2)
    with theonl:
        st.info('B√°o c√°o t·ªïng h·ª£p theo Nh√≥m l·ªõn')
        st.data_editor(bc_nl.reset_index())
    with theopl:
        st.info('B√°o c√°o t·ªïng h·ª£p theo Ph√¢n lo·∫°i')
        st.data_editor(bc_pl.reset_index())
    st.info('B√°o c√°o t·ªïng h·ª£p theo S·∫£n ph·∫©m')
    st.data_editor(bc_sp.reset_index())

elif options == 'T·ªïng quan':
    dt = data.copy()

    bc_nl = take_bc(['Nh√≥m l·ªõn', 'V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data, 'nhomlon')

    bc_pl = take_bc(['Nh√≥m l·ªõn', 'Ph√¢n lo·∫°i','V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data, 'phanloai')

    bc_sp = take_bc(['Nh√≥m l·ªõn', 'Ph√¢n lo·∫°i', 'M√£ h√†ng','V√πng mi·ªÅn', 'NƒÉm', 'Khu v·ª±c'], data)

    with st.expander('FILTER MORE'):
        nam = st.selectbox('Ch·ªçn nƒÉm', options = [2023, 2022])
        chonhcm = st.checkbox('L·∫•y khu v·ª±c HCM')

    if chonhcm == True:
        khuvucmn = dt[dt['V√πng mi·ªÅn'] == 'Mi·ªÅn Nam']['Khu v·ª±c'].unique()
    else:
        khuvucmn = dt[dt['V√πng mi·ªÅn'] == 'Mi·ªÅn Nam']['Khu v·ª±c'].unique()
        khuvucmn = [i for i in khuvucmn if i != 'HCM']

    khuvucmn = sorted(khuvucmn)

    dt = dt[dt['NƒÉm'] == nam]

    xemmienbac = st.checkbox('Xem t·ªïng Mi·ªÅn B·∫Øc')

    dstongvm = dt.groupby(['V√πng mi·ªÅn'])['Doanh thu thu·∫ßn'].sum().reset_index()
    dstongmn = dstongvm.loc[dstongvm['V√πng mi·ªÅn'] == 'Mi·ªÅn Nam', :]['Doanh thu thu·∫ßn']
    dstongmb = dstongvm.loc[dstongvm['V√πng mi·ªÅn'] == 'Mi·ªÅn B·∫Øc', :]['Doanh thu thu·∫ßn']

    if xemmienbac == False:
        st.info(f'T·ªïng doanh s·ªë mi·ªÅn Nam {nam}')
        st.metric('Doanh s·ªë', f'{dstongmn.values[0]:,}')
    else:
        mn, mb = st.columns(2)
        with mn:
            ds = np.round(dstongmn.values[0] / 1000000000, 2)
            st.info(f'T·ªïng doanh s·ªë mi·ªÅn Nam {nam}')
            st.metric('Doanh s·ªë', f'{ds} t·ª∑')
        with mb:
            ds = np.round(dstongmb.values[0] / 1000000000, 2)
            st.info(f'T·ªïng doanh s·ªë mi·ªÅn B·∫Øc {nam}')
            st.metric('Doanh s·ªë', f'{ds} t·ª∑')
    
    dt_mn = dt[dt['Khu v·ª±c'].isin(khuvucmn)]

    ds_kv_nam_mn = dt_mn.groupby(['Khu v·ª±c'])['Doanh thu thu·∫ßn'].sum().reset_index()


    kv_col = st.columns(len(khuvucmn))

    for i, k in enumerate(kv_col):
        with k:
            ds = ds_kv_nam_mn[ds_kv_nam_mn['Khu v·ª±c'] == khuvucmn[i]]['Doanh thu thu·∫ßn'].values[0]
            ds = np.round(ds / 1000000000, 2)
            st.info(f'T·ªïng doanh s·ªë {khuvucmn[i]}')
            st.metric('Doanh s·ªë', f'{ds} t·ª∑')

    q1, q2 = st.columns(2)
    with q1:
        dsmien_px = px.pie(
            ds_kv_nam_mn,
            names = 'Khu v·ª±c',
            values = 'Doanh thu thu·∫ßn',
            title = f'T·ª∑ tr·ªçng doanh s·ªë c√°c khu v·ª±c'
        )
        st.plotly_chart(dsmien_px, use_container_width = True)
    with q2:
        if len(nhomlon) > 10:
            plotdata = bc_sp.groupby(['Nh√≥m l·ªõn'])[f'T·ªïng DS {nam} Mi·ªÅn Nam'].sum().reset_index()
            plotdata_px = px.pie(
                plotdata,
                names = 'Nh√≥m l·ªõn',
                values = f'T·ªïng DS {nam} Mi·ªÅn Nam',
                title = f'T·ª∑ tr·ªçng doanh s·ªë c√°c nh√≥m'
            )
        else:
            plotdata = bc_sp.groupby(['Ph√¢n lo·∫°i'])[f'T·ªïng DS {nam} Mi·ªÅn Nam'].sum().reset_index()
            plotdata_px = px.pie(
                plotdata,
                names = 'Ph√¢n lo·∫°i',
                values = f'T·ªïng DS {nam} Mi·ªÅn Nam',
                title = f'T·ª∑ tr·ªçng doanh s·ªë ph√¢n lo·∫°i'
            )
        st.plotly_chart(plotdata_px, use_container_width = True)


    p1, p2 = st.columns(2)
    with p1:
        if len(nhomlon) > 10:
            x = dt.groupby(['Nh√≥m l·ªõn'])['Doanh thu thu·∫ßn'].sum().reset_index()
            x = x.sort_values(by = ['Doanh thu thu·∫ßn'])
            x_px = px.bar(
                x,
                x = 'Doanh thu thu·∫ßn',
                y = 'Nh√≥m l·ªõn',
                orientation = 'h',
                title = 'Doanh s·ªë nh√≥m',
                text_auto = True
            )
            st.plotly_chart(x_px, use_container_width = True)
        else:
            x = dt.groupby(['Ph√¢n lo·∫°i'])['Doanh thu thu·∫ßn'].sum().reset_index()
            x = x.sort_values(by = ['Doanh thu thu·∫ßn'])
            x_px = px.bar(
                x,
                x = 'Doanh thu thu·∫ßn',
                y = 'Ph√¢n lo·∫°i',
                orientation = 'h',
                title = 'Doanh s·ªë nh√≥m',
                text_auto = True
            )
            st.plotly_chart(x_px, use_container_width = True)
    with p2:
        if len(nhomlon) > 10:
            tangtruong2023 = bc_nl.reset_index().copy()
            tangtruong2023['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'] = tangtruong2023['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'].map(lambda x: float(x.replace('%', '')))
            tangtruong2023 = tangtruong2023.sort_values(by = ['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'], ascending = False)
            tangtruong2023_px = px.bar(
                tangtruong2023,
                x = 'TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)',
                y = 'Nh√≥m l·ªõn',
                orientation = 'h',
                title = 'TƒÉng tr∆∞·ªüng nh√≥m',
                text_auto = True
            )
            st.plotly_chart(tangtruong2023_px, use_container_width = True)
        else:
            tangtruong2023 = bc_pl.reset_index().copy()
            tangtruong2023['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'] = tangtruong2023['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'].map(lambda x: float(x.replace('%', '')))
            tangtruong2023 = tangtruong2023.sort_values(by = ['TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)'], ascending = False)
            tangtruong2023_px = px.bar(
                tangtruong2023,
                x = 'TƒÉng tr∆∞·ªüng MN 2023 (Ph·∫ßn trƒÉm)',
                y = 'Ph√¢n lo·∫°i',
                orientation = 'h',
                title = 'TƒÉng tr∆∞·ªüng nh√≥m',
                text_auto = True
            )
            st.plotly_chart(tangtruong2023_px, use_container_width = True)

    spbest, spworst = st.columns(2)
    with spbest:
        spb = dt.groupby(['M√£ h√†ng'])['Doanh thu thu·∫ßn'].sum().reset_index()
        spb = spb.sort_values(by = ['Doanh thu thu·∫ßn'], ascending = False)
        spb['M√£ h√†ng'] = spb['M√£ h√†ng'].map(lambda x: str(x))
        spb = spb.iloc[:5, :]
        spb_px = px.bar(
            spb,
            x = 'Doanh thu thu·∫ßn',
            y = 'M√£ h√†ng',
            title = '5 s·∫£n ph·∫©m ch·∫°y nh·∫•t',
            text_auto = True
        )
        st.plotly_chart(spb_px, use_container_width = True)
    with spworst:
        spb_w = dt.groupby(['M√£ h√†ng'])['Doanh thu thu·∫ßn'].sum().reset_index()
        spb_w = spb_w.sort_values(by = ['Doanh thu thu·∫ßn'], ascending = True)
        spb_w['M√£ h√†ng'] = spb_w['M√£ h√†ng'].map(lambda x: str(x))
        spb_w = spb_w.iloc[:5, :]
        spb_w_px = px.bar(
            spb_w,
            x = 'Doanh thu thu·∫ßn',
            y = 'M√£ h√†ng',
            title = '5 s·∫£n ph·∫©m k√©m nh·∫•t',
            text_auto = True
        )
        st.plotly_chart(spb_w_px, use_container_width = True)


